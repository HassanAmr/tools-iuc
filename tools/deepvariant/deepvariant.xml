<tool id="deepvariant" name="deepvariant" version="0.1">
    <description>Call genetic variants from next-generation DNA sequencing data</description>
    <requirements>
        <requirement type="package" version="0.4.1">deepvariant</requirement>
    </requirements>
    <command>
                <![CDATA[
                mkdir -p logs/ &&
                mkdir -p output.examples.tfrecord/ &&
                ln -s '${reads_input}' temp_reads_input.bam &&
                ln -s '${reads_input_index}' temp_reads_input.bam.bai &&
                #if str($ref_type) == 'text'
                    ln -s '${ref_input}' temp_ref_input.fasta &&
                    ln -s '${ref_input_fai_index}' temp_ref_input.fasta.fai &&
                #end if
                #if str($ref_type) == 'gzipped'
                    ln -s '${ref_input}' temp_ref_input.fasta.gz &&
                    ln -s '${ref_input_fai_index}' temp_ref_input.fasta.gz.fai &&
                    ln -s '${ref_input_gzi}' temp_ref_input.fasta.gz.gzi &&
                #end if

                dv_make_examples.py
                --sample sample
                #if str($ref_type) == 'text'
                    --ref temp_ref_input.fasta
                #end if
                #if str($ref_type) == 'gzipped'
                    --ref temp_ref_input.fasta.gz
                #end if
                --reads temp_reads_input.bam
                --examples output.examples.tfrecord
                #if $regions
                    --regions regions
                #end if
                &&
                dv_call_variants.py
                --sample sample
                --outfile call_variants_output.tfrecord
                --examples output.examples.tfrecord
                &&
                dv_postprocess_variants.py
                #if str($ref_type) == 'text'
                    --ref temp_ref_input.fasta
                #end if
                #if str($ref_type) == 'gzipped'
                    --ref temp_ref_input.fasta.gz
                #end if
                --infile call_variants_output.tfrecord
                --outfile '$output'
                ]]>
    </command>
    <inputs>
        <param name="reads_input" type="data" format="bam" label="Reads file" help="Aligned, sorted, indexed BAM file containing the reads we want to call. Should be aligned to a reference genome compatible with the reference file."/>
        <param name="reads_input_index" type="data" format="data" label="Reads index file" help="Index for the reads file (bam.bai format)."/>
        <param name="ref_type" type="select" label="Reference type" help="Genome reference file format. Supports fasta or gzipped fasta references.">
                <option value="text" selected="True">fasta</option>
                <option value="gzipped">gzipped</option>
        </param>
        <param name="ref_input" type="data" format="data" label="Reference file" help="Genome reference to use. Should match the reference used to align the BAM file provided in the reads file."/>
        <param name="ref_input_fai_index" type="data" format="data" label="Reference file" help="Genome reference associated FAI index to use."/>
        <param name="ref_input_gzi" type="data" format="data" label="gzi reference file" help="gzi file in case of gzipped genome reference file used."/>
        <param name="mode" type="select" help="Mode to run.">
                <option value="calling" selected="True">Calling</option>
                <option value="training">Training</option>
        </param>
        <param name="sample" type="text" label="Sample"/>
        <param name="regions" type="text" optional="true" label="Regions"/>
        <param name="cores" type="integer" optional="true" label="Cores"/>
    </inputs>
    <outputs>
        <data format="txt" name="output"/>
    </outputs>
    <tests>
        <test>
            <param name="reads_input" value="NA12878_S1.chr20.10_10p1mb.bam" />
            <param name="reads_input_index" value="NA12878_S1.chr20.10_10p1mb.bam.bai" />
            <param name="ref_input" value="ucsc.hg19.chr20.unittest.fasta.gz" />
            <param name="ref_input_fai_index" value="ucsc.hg19.chr20.unittest.fasta.gz.fai" />
            <param name="ref_input_gzi" value="ucsc.hg19.chr20.unittest.fasta.gz.gzi" />
            <param name="mode" value="calling" />
            <param name="regions" value="chr20:10,000,000-10,010,00" />
            <output name="output" ftype="vcf" file="output.vcf" />
        </test>
    </tests>
    <help>DeepVariant is an analysis pipeline that uses a deep neural network to call genetic variants from next-generation DNA sequencing data.</help>
    <citations>
            <citation type="doi">10.1101/092890</citation>
    </citations>
</tool>
